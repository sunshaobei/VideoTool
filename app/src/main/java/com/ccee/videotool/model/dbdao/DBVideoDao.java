package com.ccee.videotool.model.dbdao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ccee.videotool.model.db.DBVideo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBVIDEO".
*/
public class DBVideoDao extends AbstractDao<DBVideo, Long> {

    public static final String TABLENAME = "DBVIDEO";

    /**
     * Properties of entity DBVideo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property LocalPath = new Property(1, String.class, "localPath", false, "LOCAL_PATH");
        public final static Property AliVideoId = new Property(2, String.class, "aliVideoId", false, "ALI_VIDEO_ID");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Cover = new Property(4, String.class, "cover", false, "COVER");
        public final static Property Description = new Property(5, String.class, "description", false, "DESCRIPTION");
        public final static Property CategoryId = new Property(6, int.class, "categoryId", false, "CATEGORY_ID");
        public final static Property CategoryTitle = new Property(7, String.class, "categoryTitle", false, "CATEGORY_TITLE");
        public final static Property ProductId = new Property(8, int.class, "productId", false, "PRODUCT_ID");
        public final static Property ProductTitle = new Property(9, String.class, "productTitle", false, "PRODUCT_TITLE");
        public final static Property Scale = new Property(10, int.class, "scale", false, "SCALE");
        public final static Property Duration = new Property(11, long.class, "duration", false, "DURATION");
        public final static Property Size = new Property(12, int.class, "size", false, "SIZE");
        public final static Property VideoId = new Property(13, Integer.class, "VideoId", false, "VIDEO_ID");
        public final static Property AuditStatus = new Property(14, int.class, "auditStatus", false, "AUDIT_STATUS");
        public final static Property AuditId = new Property(15, int.class, "auditId", false, "AUDIT_ID");
        public final static Property IsDraft = new Property(16, boolean.class, "isDraft", false, "IS_DRAFT");
        public final static Property LocalImg = new Property(17, String.class, "localImg", false, "LOCAL_IMG");
        public final static Property AddTime = new Property(18, long.class, "addTime", false, "ADD_TIME");
    }


    public DBVideoDao(DaoConfig config) {
        super(config);
    }
    
    public DBVideoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBVIDEO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"LOCAL_PATH\" TEXT," + // 1: localPath
                "\"ALI_VIDEO_ID\" TEXT," + // 2: aliVideoId
                "\"TITLE\" TEXT," + // 3: title
                "\"COVER\" TEXT," + // 4: cover
                "\"DESCRIPTION\" TEXT," + // 5: description
                "\"CATEGORY_ID\" INTEGER NOT NULL ," + // 6: categoryId
                "\"CATEGORY_TITLE\" TEXT," + // 7: categoryTitle
                "\"PRODUCT_ID\" INTEGER NOT NULL ," + // 8: productId
                "\"PRODUCT_TITLE\" TEXT," + // 9: productTitle
                "\"SCALE\" INTEGER NOT NULL ," + // 10: scale
                "\"DURATION\" INTEGER NOT NULL ," + // 11: duration
                "\"SIZE\" INTEGER NOT NULL ," + // 12: size
                "\"VIDEO_ID\" INTEGER," + // 13: VideoId
                "\"AUDIT_STATUS\" INTEGER NOT NULL ," + // 14: auditStatus
                "\"AUDIT_ID\" INTEGER NOT NULL ," + // 15: auditId
                "\"IS_DRAFT\" INTEGER NOT NULL ," + // 16: isDraft
                "\"LOCAL_IMG\" TEXT," + // 17: localImg
                "\"ADD_TIME\" INTEGER NOT NULL );"); // 18: addTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBVIDEO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBVideo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String localPath = entity.getLocalPath();
        if (localPath != null) {
            stmt.bindString(2, localPath);
        }
 
        String aliVideoId = entity.getAliVideoId();
        if (aliVideoId != null) {
            stmt.bindString(3, aliVideoId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(5, cover);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(6, description);
        }
        stmt.bindLong(7, entity.getCategoryId());
 
        String categoryTitle = entity.getCategoryTitle();
        if (categoryTitle != null) {
            stmt.bindString(8, categoryTitle);
        }
        stmt.bindLong(9, entity.getProductId());
 
        String productTitle = entity.getProductTitle();
        if (productTitle != null) {
            stmt.bindString(10, productTitle);
        }
        stmt.bindLong(11, entity.getScale());
        stmt.bindLong(12, entity.getDuration());
        stmt.bindLong(13, entity.getSize());
 
        Integer VideoId = entity.getVideoId();
        if (VideoId != null) {
            stmt.bindLong(14, VideoId);
        }
        stmt.bindLong(15, entity.getAuditStatus());
        stmt.bindLong(16, entity.getAuditId());
        stmt.bindLong(17, entity.getIsDraft() ? 1L: 0L);
 
        String localImg = entity.getLocalImg();
        if (localImg != null) {
            stmt.bindString(18, localImg);
        }
        stmt.bindLong(19, entity.getAddTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBVideo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String localPath = entity.getLocalPath();
        if (localPath != null) {
            stmt.bindString(2, localPath);
        }
 
        String aliVideoId = entity.getAliVideoId();
        if (aliVideoId != null) {
            stmt.bindString(3, aliVideoId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(5, cover);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(6, description);
        }
        stmt.bindLong(7, entity.getCategoryId());
 
        String categoryTitle = entity.getCategoryTitle();
        if (categoryTitle != null) {
            stmt.bindString(8, categoryTitle);
        }
        stmt.bindLong(9, entity.getProductId());
 
        String productTitle = entity.getProductTitle();
        if (productTitle != null) {
            stmt.bindString(10, productTitle);
        }
        stmt.bindLong(11, entity.getScale());
        stmt.bindLong(12, entity.getDuration());
        stmt.bindLong(13, entity.getSize());
 
        Integer VideoId = entity.getVideoId();
        if (VideoId != null) {
            stmt.bindLong(14, VideoId);
        }
        stmt.bindLong(15, entity.getAuditStatus());
        stmt.bindLong(16, entity.getAuditId());
        stmt.bindLong(17, entity.getIsDraft() ? 1L: 0L);
 
        String localImg = entity.getLocalImg();
        if (localImg != null) {
            stmt.bindString(18, localImg);
        }
        stmt.bindLong(19, entity.getAddTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DBVideo readEntity(Cursor cursor, int offset) {
        DBVideo entity = new DBVideo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // localPath
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // aliVideoId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // cover
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // description
            cursor.getInt(offset + 6), // categoryId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // categoryTitle
            cursor.getInt(offset + 8), // productId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // productTitle
            cursor.getInt(offset + 10), // scale
            cursor.getLong(offset + 11), // duration
            cursor.getInt(offset + 12), // size
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // VideoId
            cursor.getInt(offset + 14), // auditStatus
            cursor.getInt(offset + 15), // auditId
            cursor.getShort(offset + 16) != 0, // isDraft
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // localImg
            cursor.getLong(offset + 18) // addTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBVideo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLocalPath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAliVideoId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCover(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDescription(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCategoryId(cursor.getInt(offset + 6));
        entity.setCategoryTitle(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setProductId(cursor.getInt(offset + 8));
        entity.setProductTitle(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setScale(cursor.getInt(offset + 10));
        entity.setDuration(cursor.getLong(offset + 11));
        entity.setSize(cursor.getInt(offset + 12));
        entity.setVideoId(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setAuditStatus(cursor.getInt(offset + 14));
        entity.setAuditId(cursor.getInt(offset + 15));
        entity.setIsDraft(cursor.getShort(offset + 16) != 0);
        entity.setLocalImg(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setAddTime(cursor.getLong(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBVideo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBVideo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBVideo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
